# 패션 MNIST : 70,000개의 흑백이미지 (28 * 28 pixel), 10개의 범주로 분리
# Labels
# Each training and test example is assigned to one of the following labels:
# 0 T-shirt/top, 1 Trouser, 2 Pullover, 3 Dress, 4 Coat, 5 Sandal, 6 Shirt, 7 Sneaker, 8 Bag, 9 Ankle boot 

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

fashion_mnist = tf.keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
print(train_images.shape, train_labels.shape) # (60000, 28, 28) (60000,)
print(set(train_labels)) # {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

# plt.imshow(train_images[0])
# plt.colorbar()
# plt.show()

# train data 25개 출력 (5 by 5)
# plt.figure(figsize = (10, 10))
# for i in range(25):
#     plt.subplot(5, 5, i + 1)
#     plt.xticks([])
#     plt.yticks([])
#     plt.imshow(train_images[i])
#     plt.xlabel(class_names[train_labels[i]])
#     
# plt.show()

# 이미지 데이터 정규화
train_images /= 255.0
test_images /= 255.0

# model
model = tf.keras.Sequential([
    #tf.keras.layers.Dense(512, input_shape = (784, )),
    tf.keras.layers.Flatten(input_shape=(28, 28)), # Flatten 차원축소
    tf.keras.layers.Dense(128, activation = tf.nn.relu),
    tf.keras.layers.Dense(64, activation = tf.nn.relu),
    tf.keras.layers.Dense(10, activation = tf.nn.softmax)
])
# loss = 'sparse_categorical_crossentropy' 내부적으로 one-hot encoding 해줌
model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

model.fit(train_images, train_labels, batch_size = 128, epochs = 10, verbose=2)
test_loss, test_acc = model.evaluate()













