# 상관관계 분석
# 변수 간 퍼짐정도(밀도)를 수치화해서 관련성을 분석
# 상관관계를 통해 관계가 강하다면 인과관계를 확인한 후 선형회귀 모델을 수행
# 상관관계로 1) 독립변수들의 경우에 다중공선성 확인, 2) 이론적 타당성을 확인 - 독립변수와 종속변수의 관계가 강해야함
# 공분산 / 각 표준편차의 곱으로 나누어 표준화 함으로 해서 절대값 1사이에 수치로 표현한 것이 상관계수

import numpy as np

x = np.array([8,3,6,6,9,4,3,9,3,4])
print('x 평균:', np.mean(x))
print('x 분산:', np.var(x))

print()
y = np.array([6,2,4,6,10,5,1,8,4,5]) # 음수를 넣으면 음의 상관관계
print('y 평균:', np.mean(y))
print('y 분산:', np.var(y))

# 공분산(cov) : x, y 배열에 대해
print('x, y 공분산 : ', np.cov(x, y)) # [5.61111111 6.98888889]]
print('x, y 공분산 : ', np.cov(x, y)[0, 1]) # 5.61111111111111
# 두 집단의 관계를 파악
# 단위에 따라 공분산의 크기가 달라지므로 절대적 크기로 표현이 어렵다
# 공분산을 -1 ~ 1 사이 범위로 표준화 시킨것이 상관계수

print()
print("x, y 상관계수: ", np.corrcoef(x, y))
print("x, y 상관계수: ", np.corrcoef(x, y)[0,1]) # 0.8625172792135779

# 시각화
import matplotlib.pyplot as plt
plt.plot(x, y, 'o')
plt.show()

print('-----------------')
# 주의 : 공분산/상관계수는 선형적인 관계일 때 측정이 가능. 두 변수가 비선형적일 경우 측정하기 곤란.
m = np.array([-3,-2,-1,0,1,2,3]) 
n = np.array([9,4,1,0,1,4,9])
print('m, n 공분산 : ', np.cov(m, n)[0, 1])
print('m, n 상관계수 : ', np.corrcoef(m, n)[0, 1])
plt.plot(m, n, 'o')
plt.show() 
