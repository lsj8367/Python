# -*- coding: utf-8 -*-
"""tf12autoencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zyG7-HJu-2ItLU1fbdmY8CGn0JkGmeOt
"""

# Autoencoder
# 입력 데이터의 특징을 효율적으로 담아낸 새로운 이미지를 생성. 영상의학 분야 등에서 많이 활용
# 인코더 : 모델은 고차우너 입력데이터를 저차원 표현벡터로 압축한다.
# 디코더 : 모델은 주어진 저차원 표현벡터를 원본 데이터의 차원으로 압축을 해제한다.

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPool2D, UpSampling2D, Flatten, Reshape
import matplotlib.pyplot as plt
import numpy as np

(x_train, _), (x_test, _) = mnist.load_data() # feature만 필요 : 비지도학습이므로
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32') / 255
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32') / 255

# model
autoEncoder = Sequential()

# Encoder : 입력된 값의 차원 축소
autoEncoder.add(Conv2D(32, kernel_size=3, padding = 'same', input_shape = (28, 28, 1), activation = 'relu')) # 이미지 특징 추출
autoEncoder.add(MaxPool2D(pool_size=2, padding = 'same')) # 크기(차원) 축소
autoEncoder.add(Conv2D(16, kernel_size=3, padding = 'same', activation = 'relu')) # 이미지 특징 추출
autoEncoder.add(MaxPool2D(pool_size=2, padding = 'same'))
autoEncoder.add(Conv2D(8, kernel_size=3, padding = 'same', activation = 'relu')) # 이미지 특징 추출

# Decoder : 주어진 축소 데이터를 원래 크기의 차원으로 출력
autoEncoder.add(Conv2D(8, kernel_size=3, padding = 'same', activation='relu'))
autoEncoder.add(UpSampling2D()) # 차원 2배로 확대
autoEncoder.add(Conv2D(16, kernel_size=3, padding = 'same', activation='relu'))
autoEncoder.add(UpSampling2D()) # 차원 2배로 확대
autoEncoder.add(Conv2D(32, kernel_size=3, padding = 'same', activation='relu'))
autoEncoder.add(Conv2D(1, kernel_size=3, padding = 'same', activation='sigmoid'))

autoEncoder.summary()

autoEncoder.compile(optimizer='adam', loss = 'binary_crossentropy')
autoEncoder.fit(x_train, x_train, epochs = 30, batch_size=128, validation_data=(x_test, x_test), verbose = 2)

# 출력
random_test = np.random.randint(x_test.shape[0], size = 5)
ae_img = autoEncoder.predict(x_test) # 랜덤한 이미지 5개를 얻음
plt.figure(figsize=(7, 2))

for i, image_idx in enumerate(random_test):
    ax = plt.subplot(2, 7, i + 1)
    plt.imshow(x_test[image_idx].reshape(28, 28)) # 테스트할 이미지 (원본)
    ax.axis('off')

    ax = plt.subplot(2, 7, 7 + i + 1)
    plt.imshow(ae_img[image_idx].reshape(28, 28)) # 오토인코딩된 이미지 (생성)
    ax.axis('off')

plt.show()